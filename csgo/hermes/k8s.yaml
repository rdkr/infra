---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hermes
spec:
  selector:
    matchLabels:
      app: hermes
  replicas: 1
  template:
    metadata:
      labels:
        app: hermes
    spec:
      containers:
      - name: hermes
        image: rdkr/hermes:test
        ports:
        - name: http
          containerPort: 8080
        env:
          - name: DO_TOKEN
            valueFrom:
              secretKeyRef:
                name: hermes
                key: DO_TOKEN
          - name: CSGO_GSLT_TOKEN_DM
            valueFrom:
              secretKeyRef:
                name: hermes
                key: CSGO_GSLT_TOKEN_DM
          - name: CSGO_GSLT_TOKEN_PUG
            valueFrom:
              secretKeyRef:
                name: hermes
                key: username
          - name: CSGO_WEB_TOKEN_DM
            valueFrom:
              secretKeyRef:
                name: hermes
                key: CSGO_WEB_TOKEN_DM
          - name: CSGO_RCON_PASSWORD
            valueFrom:
              secretKeyRef:
                name: hermes
                key: CSGO_RCON_PASSWORD
          - name: CSGO_SV_PASSWORD
            valueFrom:
              secretKeyRef:
                name: hermes
                key: CSGO_SV_PASSWORD

---
apiVersion: v1
kind: Service
metadata:
  name: hermes
  labels:
    app: hermes
spec:
  ports:
  - name: http
    port: 8080
  selector:
    app: hermes

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: testing123-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
    # - host: testing123.example.com             # the domain you want associated
    - http:
        paths:
          - path: /
            backend:
              serviceName: grafana
              servicePort: 3000

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["get"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: hermes

---
apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  name: prometheus
spec:
  serviceAccountName: prometheus
  resources:
    requests:
      memory: 256Mi
  serviceMonitorSelector:
    matchExpressions:
    - {key: app, operator: Exists}

---
apiVersion:  monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: hermes
  labels:
    app: hermes
spec:
  selector:
    matchLabels:
      app: hermes
  endpoints:
  - targetPort: 8080
    interval: 10s

---
apiVersion: v1
kind: Secret
metadata:
  name: sample-grafana-datasource
  labels:
    grafana_datasource: "1"
type: Opaque
stringData:
  datasource.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus2
      type: prometheus
      access: proxy
      url: http://prometheus-operated:9090
      version: 1
      editable: false

# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: prometheus-server-conf
#   labels:
#     name: prometheus-server-conf
#   namespace: hermes
# data:
#   prometheus.yml: |-
#     global:
#         scrape_interval: 5s
#         scrape_timeout: 1s
#         evaluation_interval: 1m
#     scrape_configs:
#         - job_name: 'prometheus'
#           static_configs:
#           - targets: ['localhost:9090']
#         - job_name: 'hermes'
#           static_configs:
#           - targets: ['host.docker.internal:8080']
